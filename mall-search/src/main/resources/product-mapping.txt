PUT product
{
  "mappings": {
    "properties": {
      "skuId": {
        "type": "long"
      },
      "spuId": {
        "type": "keyword"
      },
      "skuTitle": {
        "type": "text",
        "analyzer": "ik_smart"
      },
      "skuPrice": {
        "type": "keyword"
      },
      "skuImg": {
        "type": "keyword"
      },
      "saleCount": {
        "type": "long"
      },
      "hasStock": {
        "type": "boolean"
      },
      "hotScore": {
        "type": "long"
      },
      "brandId": {
        "type": "long"
      },
      "catalogId": {
        "type": "long"
      },
      "brandName": {
        "type": "keyword"
      },
      "brandImg": {
        "type": "keyword",
        "index": false,
        "doc_values": false
      },
      "catalogName": {
        "type": "keyword"
      },
      "attrs": {
        "type": "nested",
        "properties": {
          "attrId": {
            "type": "long"
          },
          "attrName": {
            "type": "keyword",
            "index": false,
            "doc_values": false
          },
          "attrValue": {
            "type": "keyword"
          }
        }
      }
    }
  }
}


其中

（1）“type”: “keyword” 保持数据精度问题，可以检索，但不分词

（2）“index”:false 代表不可被检索

（3）“doc_values”: false 不可被聚合，es就不会维护一些聚合的信息 冗余存储的字段：不用来检索，也不用来分析，节省空间

　　库存是bool。 检索品牌id，但是不检索品牌名字、图片 用skuTitle检索

复制代码
复制代码
（2）nested 数据类型场景
　　属性是"type": “nested”,因为是内部的属性进行检索

　　数组类型的对象会被扁平化处理（对象的每个属性会分别存储到一起）
　　user.name=["aaa","bbb"]
　　user.addr=["ccc","ddd"]

　　这种存储方式，可能会发生如下错误：
　　错误检索到{aaa,ddd}，这个组合是不存在的

　　数组的扁平化处理会使检索能检索到本身不存在的，为了解决这个问题，就采用了嵌入式属性，数组里是对象时用嵌入式属性（不是对象无需用嵌入式属性）

　　nested阅读：https://blog.csdn.net/weixin_40341116/article/details/80778599

　　使用聚合：https://blog.csdn.net/kabike/article/details/101460578